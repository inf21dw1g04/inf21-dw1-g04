openapi: 3.0.0
info:
  title: Biblioteca
  description: M2 - Biblioteca
  contact:
    name: Grupo 4
    email: a039291@ismai.pt
  version: 0.0.1
servers:
- url: http://localhost:8080
  description: My localhost
  variables:
    basePath:
      default: /
paths:
  /Livro:
    get:
      tags:
      - LivroController
      summary: Retrieve Livros
      operationId: retrieveLivros
      responses:
        "200":
          description: Array of Livro model instances
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Livro'
                x-content-type: application/json
            application/xml:
              schema:
                $ref: '#/components/schemas/inline_response_200'
      x-swagger-router-controller: LivroController
    post:
      tags:
      - LivroController
      summary: Insert Livro
      operationId: insertLivro
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Livro'
            examples:
              LivroInsert:
                $ref: '#/components/examples/LivroInsert'
              LivroExample01:
                $ref: '#/components/examples/LivroExample01'
              LivroExample02:
                $ref: '#/components/examples/LivroExample02'
          application/xml:
            schema:
              $ref: '#/components/schemas/Livro'
            examples:
              LivroExample01:
                $ref: '#/components/examples/LivroExample01'
              LivroExample02:
                $ref: '#/components/examples/LivroExample02'
      responses:
        "200":
          description: Insert a Livro model instance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Livro'
            application/xml:
              schema:
                $ref: '#/components/schemas/Livro'
        "400":
          description: Bad Request
      x-swagger-router-controller: LivroController
  /Livro/{id}:
    get:
      tags:
      - LivroController
      summary: Retrieve Livro
      operationId: retrieveLivro
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          format: int64
        examples:
          one:
            summary: Retrieve Livro id 1
            value: 1
          two:
            summary: Retrieve Livro id 2
            value: 2
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Livro'
            application/xml:
              schema:
                $ref: '#/components/schemas/Livro'
        "400":
          description: Bad request
        "404":
          description: id not found
      x-swagger-router-controller: LivroController
    put:
      tags:
      - LivroController
      summary: Update Livro
      operationId: updateLivro
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          format: int64
        examples:
          one:
            summary: Update Livro id 1
            value: 1
          two:
            summary: Update Livro id 2
            value: 2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Livro'
            examples:
              LivroUpdate:
                $ref: '#/components/examples/LivroInsert'
              LivroExample01:
                $ref: '#/components/examples/LivroExample01'
              LivroExample02:
                $ref: '#/components/examples/LivroExample02'
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                description: Livro PUT success
                x-content-type: application/json
        "400":
          description: Bad request
        "404":
          description: id not found
      x-swagger-router-controller: LivroController
    delete:
      tags:
      - LivroController
      summary: Delete Livro
      operationId: deleteLivro
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          format: int64
        examples:
          one:
            summary: Delete Livro id 1
            value: 1
          two:
            summary: Delete Livro id 2
            value: 2
      responses:
        "204":
          description: No Content
        "404":
          description: id not found
      x-swagger-router-controller: LivroController
  /Editora:
    get:
      tags:
      - EditoraController
      summary: Retrieve Editoras
      operationId: retrieveEditoras
      responses:
        "200":
          description: Array of Editora model instances
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Editora'
                x-content-type: application/json
            application/xml:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
      x-swagger-router-controller: EditoraController
    post:
      tags:
      - EditoraController
      summary: Insert Editora
      operationId: insertEditora
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Editora'
            examples:
              EditoraInsert:
                $ref: '#/components/examples/EditoraInsert'
              EditoraExample01:
                $ref: '#/components/examples/EditoraExample01'
              EditoraExample02:
                $ref: '#/components/examples/EditoraExample02'
          application/xml:
            schema:
              $ref: '#/components/schemas/Editora'
      responses:
        "200":
          description: Create a Editora model instances
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Editora'
            application/xml:
              schema:
                $ref: '#/components/schemas/Editora'
        "400":
          description: Bad request
      x-swagger-router-controller: EditoraController
  /Editora/{id}:
    get:
      tags:
      - EditoraController
      summary: Retrieve Editora
      operationId: retrieveEditora
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          format: int64
        examples:
          one:
            summary: Retrieve Editora id 1
            value: 1
          two:
            summary: Retrieve Editora id 2
            value: 2
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Editora'
            application/xml:
              schema:
                $ref: '#/components/schemas/Editora'
        "400":
          description: Bad request
        "404":
          description: id not found
      x-swagger-router-controller: EditoraController
    put:
      tags:
      - EditoraController
      summary: Update Editora
      operationId: updateEditora
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          format: int64
        examples:
          one:
            summary: Update Editora id 1
            value: 1
          two:
            summary: Update Editora id 2
            value: 2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Editora'
            examples:
              EditoraUpdate:
                $ref: '#/components/examples/EditoraInsert'
              EditoraExample01:
                $ref: '#/components/examples/EditoraExample01'
              EditoraExample02:
                $ref: '#/components/examples/EditoraExample02'
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                description: Editora PUT success
                x-content-type: application/json
        "400":
          description: Bad request
        "404":
          description: id not found
      x-swagger-router-controller: EditoraController
    delete:
      tags:
      - EditoraController
      summary: Delete Editora
      operationId: deleteEditora
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          format: int64
        examples:
          one:
            summary: Delete Editora id 1
            value: 1
          two:
            summary: Delete Editora id 2
            value: 2
      responses:
        "204":
          description: No Content
        "404":
          description: id not found
      x-swagger-router-controller: EditoraController
  /Autor:
    get:
      tags:
      - AutorController
      summary: Retrieve Autores
      operationId: retrieveAutores
      responses:
        "200":
          description: Array of Autor model instances
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Autor'
                x-content-type: application/json
            application/xml:
              schema:
                $ref: '#/components/schemas/inline_response_200'
      x-swagger-router-controller: AutorController
    post:
      tags:
      - AutorController
      summary: Insert Autor
      operationId: insertAutor
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Autor'
            examples:
              AutorInsert:
                $ref: '#/components/examples/AutorInsert'
              AutorExample01:
                $ref: '#/components/examples/AutorExample01'
              AutorExample02:
                $ref: '#/components/examples/AutorExample02'
          application/xml:
            schema:
              $ref: '#/components/schemas/Autor'
            examples:
              AutorInsert:
                $ref: '#/components/examples/AutorInsert'
              AutorExample01:
                $ref: '#/components/examples/AutorExample01'
              AutorExample02:
                $ref: '#/components/examples/AutorExample02'
      responses:
        "200":
          description: Insert a Autor model instances
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Autor'
            application/xml:
              schema:
                $ref: '#/components/schemas/Autor'
        "400":
          description: Bad request
      x-swagger-router-controller: AutorController
  /Autor/{id}:
    get:
      tags:
      - AutorController
      summary: Retrieve Autor
      operationId: retrieveAutor
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          format: int64
        examples:
          one:
            summary: Retrieve Autor id 1
            value: 1
          two:
            summary: Retrieve Autor id 2
            value: 2
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Autor'
            application/xml:
              schema:
                $ref: '#/components/schemas/Autor'
        "400":
          description: Bad request
        "404":
          description: id not found
      x-swagger-router-controller: AutorController
    put:
      tags:
      - AutorController
      summary: Update Autor
      operationId: updateAutor
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          format: int64
        examples:
          one:
            summary: Update Autor id 1
            value: 1
          two:
            summary: Update Autor id 2
            value: 2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Autor'
            examples:
              AutorUpdate:
                $ref: '#/components/examples/AutorInsert'
              AutorExample01:
                $ref: '#/components/examples/AutorExample01'
              AutorExample02:
                $ref: '#/components/examples/AutorExample02'
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                description: Autor PUT success
                x-content-type: application/json
        "400":
          description: Bad request
        "404":
          description: id not found
      x-swagger-router-controller: AutorController
    delete:
      tags:
      - AutorController
      summary: Delete Autor
      operationId: deleteAutor
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          format: int64
        examples:
          one:
            summary: Delete Autor id 1
            value: 1
          two:
            summary: Delete Autor id 2
            value: 2
      responses:
        "204":
          description: No Content
        "404":
          description: id not found
      x-swagger-router-controller: AutorController
  /Utilizador:
    get:
      tags:
      - UtilizadorController
      summary: Retrieve Utilizadores
      operationId: retrieveUtilizadores
      responses:
        "200":
          description: Array of Utilizador model instances
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Utilizador'
                x-content-type: application/json
            application/xml:
              schema:
                $ref: '#/components/schemas/inline_response_200'
      x-swagger-router-controller: UtilizadorController
    post:
      tags:
      - UtilizadorController
      summary: Insert Utilizador
      operationId: insertUtilizador
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Utilizador'
            examples:
              UtilizadorInsert:
                $ref: '#/components/examples/UtilizadorInsert'
              UtilizadorExample01:
                $ref: '#/components/examples/UtilizadorExample01'
              UtilizadorExample02:
                $ref: '#/components/examples/UtilizadorExample02'
          application/xml:
            schema:
              $ref: '#/components/schemas/Utilizador'
            examples:
              UtilizadorInsert:
                $ref: '#/components/examples/UtilizadorInsert'
              Utilizadore01:
                $ref: '#/components/examples/UtilizadorExample01'
              Utilizadore02:
                $ref: '#/components/examples/UtilizadorExample02'
      responses:
        "200":
          description: Insert a Utilizador model instances
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Utilizador'
            application/xml:
              schema:
                $ref: '#/components/schemas/Utilizador'
        "400":
          description: Bad request
      x-swagger-router-controller: UtilizadorController
  /Utilizador/{id}:
    get:
      tags:
      - UtilizadorController
      summary: Retrieve Utilizador
      operationId: retrieveUtilizador
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          format: int64
        examples:
          one:
            summary: Retrieve Utilizador id 1
            value: 1
          two:
            summary: Retrieve Utilizador id 2
            value: 2
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Utilizador'
            application/xml:
              schema:
                $ref: '#/components/schemas/Utilizador'
        "400":
          description: Bad request
        "404":
          description: id not found
      x-swagger-router-controller: UtilizadorController
    put:
      tags:
      - UtilizadorController
      summary: Update Utilizador
      operationId: updateUtilizador
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          format: int64
        examples:
          one:
            summary: Update Utilizador id 1
            value: 1
          two:
            summary: Update Utilizador id 2
            value: 2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Utilizador'
            examples:
              UtilizadorUpdate:
                $ref: '#/components/examples/UtilizadorInsert'
              UtilizadorExample01:
                $ref: '#/components/examples/UtilizadorExample01'
              UtilizadorExample02:
                $ref: '#/components/examples/UtilizadorExample02'
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                description: Utilizador PUT success
                x-content-type: application/json
        "400":
          description: Bad request
        "404":
          description: id not found
      x-swagger-router-controller: UtilizadorController
    delete:
      tags:
      - UtilizadorController
      summary: Delete Utilizador
      operationId: deleteUtilizador
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          format: int64
        examples:
          one:
            summary: Delete Utilizador id 1
            value: 1
          two:
            summary: Delete Utilizador id 2
            value: 2
      responses:
        "204":
          description: No Content
        "404":
          description: id not found
      x-swagger-router-controller: UtilizadorController
  /Livro/{id}/Editora:
    get:
      tags:
      - LivroByEditoraController
      summary: Retrieve Livro based on Editora ID
      operationId: retrieveLivroOnEditora
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          format: int64
        examples:
          one:
            summary: Retrieve Editora id 1
            value: 1
          two:
            summary: Retrieve Editora id 2
            value: 2
      responses:
        "200":
          description: Array of Editora model instances
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Editora'
                x-content-type: application/json
            application/xml:
              schema:
                $ref: '#/components/schemas/inline_response_200'
      x-swagger-router-controller: LivroByEditoraController
  /Livro/{id}/Autor:
    get:
      tags:
      - LivroByAutorController
      summary: Retrieve Livro based on Autor ID
      operationId: retrieveLivroOnAutor
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          format: int64
        examples:
          one:
            summary: Retrieve Autor id 1
            value: 1
          two:
            summary: Retrieve Autor id 2
            value: 2
      responses:
        "200":
          description: Array of Autor model instances
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Autor'
                x-content-type: application/json
            application/xml:
              schema:
                $ref: '#/components/schemas/inline_response_200'
      x-swagger-router-controller: LivroByAutorController
components:
  schemas:
    Livro:
      title: Livro
      type: object
      required: 
      - titulo
      properties:
        id_livro:
          type: integer
          format: int64
        titulo:
          type: string
        ano_publicacao:
          type: integer
        id_editora:
          type: integer
        id_autor:
          type: integer
      additionalProperties: false
      example:
        id_livro: 1
        titulo: titulo
        ano_publicacao: 2000
        id_editora: 1
        id_autor: 1
    Autor:
      title: Autor
      required:
      - nome
      type: object
      properties:
        id_autor:
          type: integer
          format: int64
        nome:
          type: string
        nacionalidade:
          type: string
      additionalProperties: false
      example:
        id_autor: 1
        nome: Enid Blyton
        nacionalidade: Inglesa
    Editora:
      title: Editora
      required:
      - nome
      type: object
      properties:
        id_editora:
          type: integer
          format: int64
        nome:
          type: string
      additionalProperties: false
      example:
        id_editora: 11
        nome: Soho Press
    Utilizador:
      title: Utilizador
      required:
      - nome
      type: object
      properties:
        id_utilizador:
          type: integer
          format: int64
        nome:
          type: string
      additionalProperties: false
      example:
        id_utilizador: 4
        nome: Luís Macedo
    inline_response_200:
      type: object
      properties:
        Lesson:
          type: array
          items:
            $ref: '#/components/schemas/Livro'
      xml:
        name: Livro
    inline_response_200_1:
      type: object
      properties:
        Lesson:
          type: array
          items:
            $ref: '#/components/schemas/Autor'
      xml:
        name: Livro
  examples:
    LivroExample01:
      value:
        id_livro: 1
        titulo: Livro1
        ano_publicacao: 1990
        id_editora: 1
        id_autor: 1
    LivroExample02:
      value:
        id_livro: 2
        titulo: Livro2
        ano_publicacao: 1985
        id_editora: 2
        id_autor: 2
    LivroInsert:
      value:
        titulo: Titulo do livro
        ano_publicacao: 1943
        id_editora: 1
        id_autor: 1
    EditoraExample01:
      value:
        id: 1
        nome: Editora1
    EditoraExample02:
      value:
        id: 2
        nome: Editora2
    EditoraInsert:
      value:
        nome: Nome da Editora
    AutorExample01:
      value:
        id: 1
        nome: Autor1
        nacionalidade: Portuguesa
    AutorExample02:
      value:
        id: 2
        nome: Autor2
        nacionalidade: Inglesa
    AutorInsert:
      value:
        nome: Nome do Autor
        nacionalidade: Nacionalidade do Autor
    UtilizadorExample01:
      value:
        id: 1
        nome: Utilizador1
    UtilizadorExample02:
      value:
        id: 2
        nome: Utilizador2
    UtilizadorInsert:
      value:
        nome: Nome do Utilizador
